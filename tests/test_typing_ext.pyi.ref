from collections.abc import Iterable
import py_stub_test
from typing import Generic, Optional, Self, TypeAlias, TypeVar

from . import submodule as submodule
from .submodule import F as F, f as f2


# a prefix

class Foo:
    def __lt__(self, arg: int, /) -> bool: ...

    def __gt__(self, arg: int, /) -> bool: ...

    def __le__(self, arg: Foo, /) -> bool: ...

    def __ge__(self, arg: Foo, /) -> bool: ...

    lt_alias = __lt__

def f() -> None: ...

def makeNestedClass() -> py_stub_test.AClass.NestedClass: ...

FooAlias: TypeAlias = Foo

f_alias = f

@my_decorator
class CustomSignature(Iterable[int]):
    @my_decorator
    def method(self: Self): ...

    def method_with_default(self, value: bool = bool(True)) -> None: ...

    @property
    def value(self, /) -> Optional[int]:
        """docstring for getter"""

    @value.setter
    def value(self, value: Optional[int], /) -> None:
        """docstring for setter"""

pytree: dict = {'a' : ('b', [123])}

T = TypeVar("T", contravariant=True)

class Wrapper(Generic[T]):
    def __init__(self, arg: T, /) -> None: ...

    def get(self, /) -> T: ...

    def __eq__(self, arg: object, /) -> bool: ...

class WrapperFoo(Wrapper[Foo]):
    pass

class WrapperTypeParam[T]:
    pass

def list_front[T](arg: list[T], /) -> T: ...

def tweak_me(arg: int):
    """
    prior docstring
    remains preserved
    """

# a suffix
